# Generated by Django 4.2.4 on 2023-08-31 11:39

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('username', models.CharField(max_length=150, unique=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('date_joined', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('first_name', models.CharField(blank=True, max_length=30, null=True)),
                ('last_name', models.CharField(blank=True, max_length=150, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ExerciseCompendium',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('parent_percentage', models.IntegerField(default=100)),
                ('equipment', models.CharField(blank=True, max_length=255, null=True)),
                ('rounding_to', models.FloatField(default=2.5)),
                ('is_bilateral', models.BooleanField(default=True)),
                ('is_unilateral', models.BooleanField(default=False)),
                ('upper_lower_body', models.CharField(blank=True, max_length=50, null=True)),
                ('push_pull', models.CharField(blank=True, max_length=50, null=True)),
                ('vertical_horizontal', models.CharField(blank=True, max_length=50, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='builder.exercisecompendium')),
            ],
        ),
        migrations.CreateModel(
            name='ExerciseVariables',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('default_percentage', models.IntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('child_exercise', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='child_variables', to='builder.exercisecompendium')),
                ('parent_exercise', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='parent_variables', to='builder.exercisecompendium')),
            ],
        ),
        migrations.CreateModel(
            name='Programs',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.TextField()),
                ('duration_weeks', models.IntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='programs', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='AccountMetrics',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='account_metrics', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('total_visits', models.IntegerField(default=0)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('total_programs_created', models.IntegerField(default=0)),
                ('total_sessions_attended', models.IntegerField(default=0)),
                ('total_goals_set', models.IntegerField(default=0)),
                ('exercises_completed', models.IntegerField(default=0)),
                ('goals_reached', models.IntegerField(default=0)),
                ('sessions_completed', models.IntegerField(default=0)),
                ('programs_completed', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserExerciseVariables',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('custom_percentage', models.IntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('exercise_variable', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_variables', to='builder.exercisevariables')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exercise_variables', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserExerciseVariableLogs',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('old_percentage', models.IntegerField()),
                ('new_percentage', models.IntegerField()),
                ('changed_at', models.DateTimeField(auto_now_add=True)),
                ('exercise_variable', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_variable_logs', to='builder.exercisevariables')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exercise_variable_logs', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Sessions',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('session_number', models.IntegerField()),
                ('session_date', models.DateField(blank=True, null=True)),
                ('template_type', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('expert', 'Expert')], max_length=20)),
                ('json_data', models.JSONField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('program', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to='builder.programs')),
            ],
        ),
        migrations.CreateModel(
            name='OneRM',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('squat', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('deadlift', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('bench_press', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('standing_row', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('chin_ups', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('military_press', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('hip_thrust', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('clean', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('snatch', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='one_rm', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='LoadingMethods',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('type', models.CharField(choices=[('Strength', 'Strength'), ('Volume', 'Volume'), ('Hypertrophy', 'Hypertrophy'), ('Fat Loss', 'Fat Loss'), ('Accessory', 'Accessory'), ('Power', 'Power')], max_length=20)),
                ('phase', models.CharField(choices=[('Loading', 'Loading'), ('Recovery', 'Recovery'), ('Volume', 'Volume'), ('Strength', 'Strength')], max_length=20)),
                ('level', models.CharField(choices=[('Intermediate', 'Intermediate'), ('Expert', 'Expert')], max_length=20)),
                ('parameters', models.JSONField()),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='loading_methods', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='LayoutTemplates',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('warmup_count', models.IntegerField()),
                ('power_count', models.IntegerField()),
                ('strength_count', models.IntegerField()),
                ('hypertrophy_count', models.IntegerField()),
                ('accessory_count', models.IntegerField()),
                ('plyometric_count', models.IntegerField()),
                ('circuit_count', models.IntegerField()),
                ('cooldown_count', models.IntegerField()),
                ('level', models.CharField(choices=[('Beginner', 'Beginner'), ('Intermediate', 'Intermediate'), ('Expert', 'Expert')], max_length=20)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='layout_templates', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='History',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('program_data', models.JSONField(blank=True, null=True)),
                ('session_data', models.JSONField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('program', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='history', to='builder.programs')),
                ('session', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='history', to='builder.sessions')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='history', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Goals',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('goal_type', models.CharField(choices=[('short_term', 'Short Term'), ('medium_term', 'Medium Term'), ('long_term', 'Long Term')], max_length=20)),
                ('category', models.CharField(choices=[('frequency', 'Frequency'), ('fat_loss', 'Fat Loss'), ('muscle_gain', 'Muscle Gain'), ('strength', 'Strength')], max_length=20)),
                ('description', models.TextField()),
                ('target_value', models.FloatField()),
                ('unit', models.CharField(choices=[('kg', 'Kg'), ('lbs', 'Lbs'), ('sessions', 'Sessions'), ('weeks', 'Weeks')], max_length=10)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('achieved', 'Achieved'), ('failed', 'Failed')], max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='goals', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Calendar',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('event_type', models.CharField(choices=[('Planned Session', 'Planned Session'), ('PT Session', 'PT Session'), ('Bookable', 'Bookable')], max_length=20)),
                ('event_date', models.DateField()),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('program', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='calendar_events', to='builder.programs')),
                ('trainer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='trainer_calendar_events', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='calendar_events', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserRole',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='builder.role')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'role')},
            },
        ),
        migrations.CreateModel(
            name='TrainerClient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive')], default='inactive', max_length=20)),
                ('consent', models.BooleanField(default=False)),
                ('communication_channel', models.CharField(blank=True, max_length=50, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='client_trainers', to=settings.AUTH_USER_MODEL)),
                ('trainer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trainer_clients', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('trainer', 'client')},
            },
        ),
        migrations.CreateModel(
            name='Social',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('declined', 'Declined'), ('blocked', 'Blocked')], default='pending', max_length=10)),
                ('relationship_type', models.CharField(choices=[('friend', 'Friend'), ('client', 'Client'), ('trainer', 'Trainer')], max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user1_relations', to=settings.AUTH_USER_MODEL)),
                ('user2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user2_relations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user1', 'user2')},
            },
        ),
    ]
